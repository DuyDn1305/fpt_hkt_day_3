// import Person "person";
import Text "mo:base/Text";
import Nat "mo:base/Nat";
import HashMap "mo:base/HashMap";
// import Principal "mo:base/Principal";
// import Cycles "mo:base/ExperimentalCycles";
import Hash "mo:base/Hash";
import Trie "mo:base/Trie";
import Result "mo:base/Result";
import Principal "mo:base/Principal";
import HTTP "http";


import Time "mo:base/Time";


actor {
  // public type Person = Person.Person;
  // let tom : Person = {
  //   name = "duy dn"; age = 59;
  // };
  // public func test() : async Text {
  //     let tom_name = tom.name;
  //     let tom_age = tom.age;
  //     return tom_name#Nat.toText(tom_age);
  // };
  // public shared(msg) func whoami() : async Principal {
  //   let principal_caller = msg.caller;
  //   return(principal_caller);
  // };

  // let anonymous_principal : Principal = Principal.fromText("2vxsx-fae");
  // let users = HashMap.HashMap<Principal, Text>(0, Principal.equal, Principal.hash);
  // users.put(anonymous_principal, "This is the anonymous principal");

  // dfx identity list
  // dfx identity new duydn1305
  // dfx identity get-principal
  // dfx canister call day_3_backend test '()'

  // public func test() : async ?Text {
  //     return(users.get(Principal.fromText("2vxsx-fae")));
  // };

  // public func balance() : async Nat {
  //     return(Cycles.balance())
  // };
  // crud with trie
  // type Person = {
  //   name : Text;
  //   age : Nat;
  //   address : Text;
  //   sex : Bool;
  // };
  // stable var persons : Trie.Trie<Nat, Person> = Trie.empty();
  // stable var next : Nat = 0;
  // private func key (x : Nat) : Trie.Key<Nat> {
  //   return {key = x; hash = Hash.hash(x)};
  // };

  // public func create_account (p : Person) : async Bool {
  //   let id = next;
  //   let (new_person, exist) = Trie.put(
  //     persons,
  //     key(id),
  //     Nat.equal,
  //     p
  //   );
  //   switch (exist) {
  //     case null {
  //       persons := new_person;
  //       next += 1;
  //       return true;
  //     };
  //     case (?v) {return false;};
  //   };
  // }; 

  // public func read_account (id : Nat) : async ?Person {
  //   Trie.find(persons, key(id), Nat.equal)
  // };

  // public func update_account (id : Nat, p : Person) : async Bool {
  //   switch (Trie.find(persons, key(id), Nat.equal)) {
  //     case null {return false};
  //     case (_) {
  //       persons := Trie.replace(persons, key(id), Nat.equal, ?p).0; 
  //       return true;
  //     };
  //   };
  // };

  // public func delete_account (id : Nat) : async Bool {
  //   switch (Trie.find(persons, key(id), Nat.equal)) {
  //     case null {return false}; 
  //     case (?v) {
  //       persons := Trie.remove(persons, key(id), Nat.equal).0; 
  //       return true;
  //     };
  //   };
  // };
  // public type Result = Result.Result<>;
  // type Result<T,E> = Result.Result<T, E>;
  // // type Result<(), Text> = {#ok ; #err : Text};

  // // type Result<(), Text> = {#ok ; #err : Text};
  // public shared ({caller}) func register() : async Result<(), Text> {
  //     if(Principal.isAnonymous(caller)){
  //         return #err("You need to be authenticated to register");
  //     } else {
  //         // Do something
  //         return #ok;
  //     };
  // };
  // public query func http_request(request : HTTP.Request) : async HTTP.Response {
  //   let response = {
  //     body = Text.encodeUtf8("Hello world");
  //     headers = [("Content-Type", "text/html; charset=UTF-8")];
  //     status_code = 200 : Nat16;
  //     streaming_strategy = null
  //   };
  //   return(response)
  // };


   
    public type Profile = {
        name : Text;
        age : Nat;
        address : Text;
        sex : Bool;
    };

    // Create a  new profile and store it inside the hashmap : the Key is the principal of the caller and the Value is the Profile submited.
    let users : HashMap.HashMap<Principal, Profile> = HashMap.HashMap<Principal, Profile>(0, Principal.equal, Principal.hash);
    
    // Principal methods of the HashMap.

    // .put() : Create
    // .get() : Read 
    // .replace() : Update
    // .delete() : Delete

    // Create. Caller is the principal of the caller
    public shared ({caller}) func create_profile(user : Profile) : async () {
        users.put(caller, user);
        return;
    };
    
    // Read. Optional type needed.
    public query func read_profile(principal : Principal) : async ?Profile {
        return(users.get(principal));
    };

    //public shared ({caller}) func test() : async Text {
    //    return("Test passed");
    //};


    //Update. Result type introduced. Switch/Case.
    public shared({caller}) func update_profile(user : Profile) : async Result.Result<Text,Text> {
        switch(users.get(caller)){
            case(null) return #err("There is no user profile for principal : " # Principal.toText(caller));
            case(?user) {
                users.put(caller, user);
                return #ok("Profile modified for user with principal : " # Principal.toText(caller));
            };
        };
    };

    //Delete.
    public shared({caller}) func delete_profile(principal : Principal) : async Result.Result<(), Text> {
      //if(caller != principal) {
      //	return #err("This is not your profile");
      // }  
	switch(users.remove(principal)){
            case(null) {
                return #err("There is no profile for user with principal " # Principal.toText(principal));
            };
            case(?user){
                return #ok();
            };
        };
    };


    /* New concepts introduced in this lecture (a lot!) :
    1) CRUD 
    2) Key/Value paradigm
    3) Hashmap
    4) Type declaration.
    4) ({caller}) / principal to authenticate users
    5) switch/case
    6) Result type */
    

};
